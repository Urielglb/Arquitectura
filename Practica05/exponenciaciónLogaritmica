.data 
x:	.word 5 #Número que se elevará
n:	.word 5 #potencia a la que se elevará
r:	.word 1 #resultado
d:	.word 2 #Numero para poder dividir entre dos

in1: 	.asciiz "ingresa n\n"
in2: 	.asciiz "ingresa x\n"

.text 
.macro read_int(%in)
	li $v0, 5
	syscall
	move %in $v0
.end_macro 
.macro print_int(%out)
	li $v0 1
	move $a0, %out  
    	syscall
.end_macro
.macro print_str(%r)
	li $v0 4
	la $a0, %r 
    	syscall
.end_macro
	
	print_str(in1)
	read_int($t0) #Registro que guardará n
	print_str(in2)
	read_int($t1) #Rehistro que guardará  x
	lw $t2 r #Registro que guardará el resultado
	lw $t3 d #Registro para dividir entre 2
	
while:	#ciclo while para sacar el resultado
	beq  $t0 1 end #si n=1 termina el ciclo
	div $t0 $t3 #n/2
	mfhi $t4 #Se guarda en registro t4 el residuo de n/2
	beq $t4 1 segundo #Si residuo de n/2 es 1 se sigue un segundo camino
	div $t0 $t0 2 #Se divide n/2 y se guarda en t0
	mul $t1 $t1 $t1 #Se eleva x al cuadrado y se guarda en t1
	j while #Se regresa al inicio
	
segundo: #Segundo camino que se seguira si n%2 = 1 y que solo tiene de diferente que r se multiplica por x y se guarda en $t2
	mul $t2 $t2 $t1 #Se multiplica r por x y se guarda en $t2
	div $t0 $t0 2 #Se divide n/2 y se guarda en t0
	mul $t1 $t1 $t1  #Se eleva x al cuadrado y se guarda en t1
	j while	#Se regresa al ciclo while

end:	
	mul $t2 $t2 $t1 #Se hace la ultima operación al resultado que es multiplicarlo por x
	print_int($t2)
	
